/**
 * Gets a farm's data, and generates a page to manage the farm, adding or removing hosts or users.

 * Calls the actions getFarms, changefarmview, addhostinfarm, adduserinfarm, remhostfromfarm, remuserfromfarm 
 * Uses the templates "farmsAdminManage.html", "farmSettingsForm.html"
 * Contains 3 functions : addHtoF( $item ), addUtoF( $item ) and removeFromFarm( $item ) to add an host, an user, or remove one of them.
 * @function
 * @param {Number} id The id of the farm we want to manage
 */
function farm(id) {
	deletePeriodicGetStatus();
	$.ajax({
		url: "?ajax=true&action=getFarms",
		type: 'post',
		data: 'id=' + id,
		success: function(data){	
			var saveData = data;
			
			var i=0, j=0;
			saveData.hostsInFarm = new Array();
			saveData.hostsNotInFarm = new Array();
			saveData.usersInFarm = new Array();
			saveData.usersNotInFarm = new Array();
						
			for (var ah in saveData.allHosts) {	
				var inGrp = false;		
				for (var hif in saveData.hostsinfarm) {
					if (saveData.hostsinfarm[hif] === saveData.allHosts[ah].idH) {
						saveData.hostsInFarm[i++]=saveData.allHosts[ah];
						inGrp = true;
					}
				}
				if (! inGrp) {
					saveData.hostsNotInFarm[j++]=saveData.allHosts[ah];
				}
			}

			i=0; 
			j=0;
			for (var au in saveData.allUsers) {	
				var inGrp = false;		
				for (var uig in saveData.usersinfarm) {
					if (saveData.usersinfarm[uig] === saveData.allUsers[au].id) {
						saveData.usersInFarm[i++]=saveData.allUsers[au];
						inGrp = true;
					}
				}
				if (! inGrp) {
					saveData.usersNotInFarm[j++]=saveData.allUsers[au];
				}
			}

			$.get('templates/farmsAdminManage.html', function(data) {
				$('#content').html( $.tmpl(data, saveData) );
				
				$( "#dialog-farms" ).dialog({
					autoOpen: false,
					resizable: false,
					height:240,
					modal: true,
					buttons: {
						"OK": function() {
							deleteFarm ($(".farm")[0].id);
							$(this).dialog("close");
						},
						Cancel: function() {
							$(this).dialog("close");
						}
					}
				});

				$("#buttonFarmSettings").button().click( function() {
					$.get('templates/farmSettingsForm.html', function(data) {
						$("#dialog-settings-farm").remove();
						$('#content').append( $.tmpl(data, saveData) );
						$("#seeOrNot").buttonset();
						
						$("#dialog-settings-farm").dialog({
							autoOpen: false,
							resizable: false,
							height:200,
							width:500,
							modal: true,
							buttons: {
								"Change": function() {
									seeallH = document.getElementById("seeallH");
									percentofH = document.getElementById("percentofH");
									var data2send;
										
									if (seeallH.checked) {
										data2send = "&seeall=true";
									} else if (percentofH.checked) {
										data2send = "&seeall=false";
									} else {
										alert("error");
										return false;
									}										

									$.ajax ({
   	  			  		  	 		url: "?ajax=true&action=changefarmview",
								 		type: 'post',
								 		data : data2send + "&idFarm=" + saveData.id,
								 		success : function (data) {
											farm (saveData.id);
										},    
									   dataType: 'json'
  	     			 				});							
							
									$(this).dialog("close");
								},
								Cancel: function() {
									$(this).dialog("close");
								}
							}
						}).dialog("open");
					});
					
					return false;
				});  	
								
				$("#buttonDeleteFarm").button().click( function() {
					$("#dialog-farms").dialog("open");
					return false;
				}); 
				
				$("#buttonSearchHosts").button().click( function() {
					var toSearch = $("input#searchHosts").val();			
					for (var hnif in saveData.hostsNotInFarm) {
						$("#hosts li#"+saveData.hostsNotInFarm[hnif].idH).show();
						if (saveData.hostsNotInFarm[hnif].nameH.indexOf(toSearch) == -1) {
							$("#hosts li#"+saveData.hostsNotInFarm[hnif].idH).hide();
						}
					}
				}); 	
				
				$("#buttonSearchUsers").button().click( function() {
					var toSearch = $("input#searchUsers").val();		
					for (var unif in saveData.usersNotInFarm) {
						$("#users li#"+saveData.usersNotInFarm[unif].id).show();
						if (saveData.usersNotInFarm[unif].login.indexOf(toSearch) == -1) {
							$("#users li#"+saveData.usersNotInFarm[unif].id).hide();
						}
					}
				});
				
				$("#users li").dblclick( function () {
					addUserToFarm (this.id, saveData.id);
				});	

				$("#usersinGroup li").dblclick( function () {
					removeUserFromFarm (this.id, saveData.id);
				});
				
				$("#hosts li").dblclick( function () {
					addHostToFarm (this.id, saveData.id);
				});	

				$("#hostsinGroup li").dblclick( function () {
					removeHostFromFarm (this.id, saveData.id);
				});				
								
					
				var $hosts = $( "#hosts" ), $users = $( "#users" ), $group = $( "#farmContent" );

				$( "li", $hosts ).draggable({
					cancel: "a.ui-icon", // clicking an icon won't initiate dragging
					revert: "invalid", // when not dropped, the item will revert back to its initial position
					containment: "document",
					helper: "clone",
					cursor: "move"
				});
				
				$( "li", $users ).draggable({
					cancel: "a.ui-icon", // clicking an icon won't initiate dragging
					revert: "invalid", // when not dropped, the item will revert back to its initial position
					containment: "document",
					helper: "clone",
					cursor: "move"
				});
				
				$( "li", $group ).draggable({
					cancel: "a.ui-icon", // clicking an icon won't initiate dragging
					revert: "invalid", // when not dropped, the item will revert back to its initial position
					containment: "document",
					helper: "clone",
					cursor: "move"
				});

				// let the group be droppable, accepting the hosts items
				$group.droppable({
					accept: "#hosts > li, #users > li",
					activeClass: "ui-state-highlight",
					drop: function( event, ui ) {
						for (var classes in ui.draggable.context.classList) {
							if (ui.draggable.context.classList[classes]=== 'hosts') {
								addHtoF( ui.draggable );
								break;
							} else if (ui.draggable.context.classList[classes]=== 'users') {
								addUtoF( ui.draggable );
								break;
							}
						}
					}
				});

				// let the hosts be droppable as well, accepting items from the group
				$hosts.droppable({
					accept: "#farmContent #hostsinGroup li",
					activeClass: "custom-state-active",
					drop: function( event, ui ) {
						removeFromFarm( ui.draggable );
					}
				});
				
				$users.droppable({
					accept: "#farmContent #usersinGroup li",
					activeClass: "custom-state-active",
					drop: function( event, ui ) {
						removeFromFarm( ui.draggable );
					}
				});

				var recycle_icon = "";
				
				function addHtoF( $item ) {
					$item.fadeOut(function() {
						var $list = $( "ul", $group ).length ?
							$( "ul", $group ) :
							$( "<ul class='hosts ui-helper-reset'/>" ).appendTo( $group );
						$item.find( "a.ui-icon-group" ).remove();
						$item.append( recycle_icon ).appendTo( $list ).fadeIn();
					});
					addHostToFarm ($item.context.id, saveData.id);
				}
				
				function addUtoF( $item ) {
					$item.fadeOut(function() {
						var $list = $( "ul", $group ).length ?
							$( "ul", $group ) :
							$( "<ul class='hosts ui-helper-reset'/>" ).appendTo( $group );
						$item.find( "a.ui-icon-group" ).remove();
						$item.append( recycle_icon ).appendTo( $list ).fadeIn();
					});
					addUserToFarm ($item.context.id, saveData.id);
				}

				var group_icon = "";
				function removeFromFarm( $item ) {
					var whereAppend;
					var isHost;
					for (var classes in $item.context.classList) {
						if ($item.context.classList[classes]=== 'hosts') {
							whereAppend = $hosts;
							isHost = true;
							break;
						} else if ($item.context.classList[classes]=== 'users') {
							whereAppend = $users;
							isHost = false;
							break;
						}
					}									 
					$item.appendTo( whereAppend ).fadeIn();
					
					if (isHost) {
						removeHostFromFarm ($item.context.id, saveData.id);
					} else {
						removeUserFromFarm ($item.context.id, saveData.id);						
					}				
				}
			});
		},
		dataType: 'json'
	});	
}

/**
 * Gets the template to create a farm, checks the form and if it is validated, sends the data with ajax to the server.
 * When the response of ajax request is received (containing the id of the created farm), the function prints the farm's page.
 * Calls the action addfarm
 * Uses the template "addFarmForm.html"
 * @function
 */
function createFarm() {
	deletePeriodicGetStatus();
	$.get('templates/addFarmForm.html', function(data) {
		$( "#content" ).html( $.tmpl(data, null) );
		$(".buttonAddFarm").button();
	 	$("#formaddfarm").submit(function() {  
	    	var fname = $("input#farmname").val();
 	 	  	if ( (fname.length < 4) || (fname.length > 40) ) {
 		  		$("#formaddfarm .ui-state-error").html('<p>Farmname must be between 4 and 40 chars </p>'); 
				return false; 
			} else {
				$.ajax ({
					url: "?ajax=true&action=addfarm",
					type: 'post',
					data : "farmname=" + fname,
					success : function (data) {
						// add the farm to the menu
						$("#ulfarms").prepend('<li> <a id="farm' + data + '" onclick="farm(' + data + ')" href="#">' + fname + '</a> </li>'); 
						farm(data);
					},    
					dataType: 'json'
     	   	});
			}
			return false; 
		});
	});
}

/**
 * Send an ajax request to remove an host from the farm. 
 * When the response is received, the page is refreshed.
 * Calls the action remhostfromfarm
 * @function
 * @param {Number} idHost The id of the host we want to remove from the farm
 * @param {Number} idFarm The id of the farm
 */
function removeHostFromFarm (idHost, idFarm) {
   $.ajax ({
		url: "?ajax=true&action=remhostfromfarm",
		type: 'post',
		data : "idHost="+idHost + "&idFarm="+idFarm,
		success : function (data) {
			farm (idFarm);
		},    
		dataType: 'json'
  	});
}

/**
 * Send an ajax request to add an host to the farm. 
 * When the response is received, the page is refreshed.
 * Calls the action addhostinfarm
 * @function
 * @param {Number} idHost The id of the host we want to remove from the farm
 * @param {Number} idFarm The id of the farm
 */
function addHostToFarm (idHost, idFarm) {
	$.ajax ({
     	url: "?ajax=true&action=addhostinfarm",
		type: 'post',
		data : "idHost="+idHost + "&idFarm="+idFarm,
		error : function (data) {
			alert('error');
		}, 
		success : function (data) {
			farm(idFarm);
		}, 					  
	   dataType: 'json'
 	});
}
  	      		
/**
 * Send an ajax request to remove an user from the farm. 
 * When the response is received, the page is refreshed.
 * Calls the action remuserfromfarm
 * @function
 * @param {Number} idUser The id of the user we want to remove from the farm
 * @param {Number} idFarm The id of the farm
 */
function removeUserFromFarm (idUser, idFarm) {
   $.ajax ({
		url: "?ajax=true&action=remuserfromfarm",
		type: 'post',
		data : "idUser="+idUser + "&idFarm="+idFarm,
		success : function (data) {
			farm (idFarm);
		},    
		dataType: 'json'
  	});
}

/**
 * Send an ajax request to add an user in the farm. 
 * When the response is received, the page is refreshed.
 * Calls the action adduserinfarm
 * @function
 * @param {Number} idUser The id of the user we want to add to the farm
 * @param {Number} idFarm The id of the farm
 */
function addUserToFarm (idUser, idFarm) {
	$.ajax ({
	  	url: "?ajax=true&action=adduserinfarm",
		type: 'post',
		data : "idUser="+idUser + "&idFarm="+idFarm,
		error : function (data) {
			alert('error');
		},
		success : function (data) {
			farm(idFarm);
		}, 
	   dataType: 'json'
	});
}

/**
 * Send an ajax request to delete the farm. 
 * When the response is received, prints a message to tell the admin.
 * Calls the action delfarm
 * @function
 * @param {Number} id The id of the farm we want to delete
 */
function deleteFarm(id) {
	$("header #farm" + id).remove();
	$.ajax({
 		url: "?ajax=true&action=delfarm",
 		type: 'post',
 		data : "&id=" + id.substring(1),
 		success :function (data) {
 			$('#content').html('');
 			$("#messages").html('<div id="farmDeletedMessage" class="ui-state-error ui-corner-all" style="margin-top: 20px;"> <p> Farm deleted !</p> </div>');
			$("#farmDeletedMessage").delay(3000).hide(2000); 		
 		},    
  		dataType: 'json'
	});
}

/**
 * Gets the name and status of the hosts from all the farms and prints them, farm by farm
 * Then, runs a function to refresh the hosts' status every minute.
 * Calls the action seeallfarms
 * Uses the template "farmsListHosts.html"
 * @function
 */
function seeAllFarms() {
	deletePeriodicGetStatus();
	resetHostTab();
		
	$.ajax({
	  url: "?ajax=true&action=seeallfarms",
 	  type: 'post',
	  success: function(data){
			var saveData = data;
			var farms = data['farms'];
			
	  		if (data == null) { 
 				logout(); 
 				return false; 
 			}

	   	$('#content').html('<div id=userFarms>');							
			$.get('templates/farmsListHosts.html', function(data) {
				$("#userFarms").html( $.tmpl(data, saveData) );
  				$('button').button();
  				$('.wolButton').hide();
  				 	
  				var tabSend = new Array ();			
  				for (var f in farms) {
					var farms_hosts = farms[f].hostsinfarm;
					for (var fh in farms_hosts) {
						getStatus(farms_hosts[fh].idH, farms[f].id+"f");
						add2tab(farms_hosts[fh].idH, farms[f].id+"f");
					}
				}
				runPeriodicGetStatus ();					
			});
			
  	  },
  	  dataType: 'json'
	});
}
